#! /opt/perl/bin/perl

# ABSTRACT: Dancer-powered Moose examinations (interactive)
# PODNAME: mexi

use Dancer;
use File::Find::Rule;
use Hash::Merge qw/ merge /;
use Modern::Perl;
use MooseX::amine;
use Template;
use Try::Tiny;

set appname      => 'MooseX::amine';
set charset      => "UTF-8";
set template     => "template_toolkit";
set logger       => 'console';
set log          => 'core';
set show_errors  => 1 ;
set access_log   => 1;
set warnings     => 1;

layout 'main';

my %standard_mooosex_amine_args = (
  include_private_attributes => 1 ,
  include_private_methods    => 1 ,
);

get '/_list' => sub {
  my @files = File::Find::Rule->file()->name('*.pm')->in('./');

  my %tree;
  foreach my $file ( @files  ) {
    my @parts = split '/' , $file;
    my $hash = { pop @parts => $file };
    while ( my $part = pop @parts ) {
      my $new_hash = { $part => $hash };
      $hash = $new_hash;
    }
    %tree = %{ merge( $hash , \%tree )  };
  }

  template 'list' => { files => \@files  , tree => \%tree };
};

get '/_show/name/*' => sub {
  my( $name ) = splat;

  try {
    my $mex = MooseX::amine->new({
      module => $name ,
      %standard_mooosex_amine_args ,
    });
    template 'show' => {
      mex  => $mex->examine ,
      name => $name
    };
  }
  catch { debug $name };

};

get qr{^/_show/(.*)} => sub {
  my( $file ) = splat;

  try {
    my $mex = MooseX::amine->new({
      path => $file ,
      %standard_mooosex_amine_args ,
    });
    template 'show' => {
      mex  => $mex->examine ,
      name => $mex->module };
  }
  catch {
    if ($_ =~ /^Can't locate object method "meta" via package/ ) {
      template 'show' => { no_mex =>1 , message => 'Not a Moose object' };
    }
    else { die $_ }
  };
};

get '/_show' => sub {
  template 'show' => { no_mex => 1 };
};

get '/' => sub { template 'index' => {} => { layout => 0 } };

Dancer->dance;
